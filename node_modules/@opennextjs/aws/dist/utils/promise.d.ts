import type { WaitUntil } from "../types/open-next";
/**
 * A `Promise.withResolvers` implementation that exposes the `resolve` and
 * `reject` functions on a `Promise`.
 * Copied from next https://github.com/vercel/next.js/blob/canary/packages/next/src/lib/detached-promise.ts
 * @see https://tc39.es/proposal-promise-with-resolvers/
 */
export declare class DetachedPromise<T = any> {
    readonly resolve: (value: T | PromiseLike<T>) => void;
    readonly reject: (reason: any) => void;
    readonly promise: Promise<T>;
    constructor();
}
export declare class DetachedPromiseRunner {
    private promises;
    withResolvers<T>(): DetachedPromise<T>;
    add<T>(promise: Promise<T>): void;
    await(): Promise<void>;
}
export declare function runWithOpenNextRequestContext<T>({ isISRRevalidation, waitUntil, }: {
    isISRRevalidation: boolean;
    waitUntil?: WaitUntil;
}, fn: () => Promise<T>): Promise<T>;
