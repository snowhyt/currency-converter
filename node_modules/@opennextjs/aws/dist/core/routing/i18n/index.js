import { NextConfig } from "../../../adapters/config/index.js";
import { debug } from "../../../adapters/logger.js";
import { acceptLanguage } from "./accept-header";
function isLocalizedPath(path) {
    return (NextConfig.i18n?.locales.includes(path.split("/")[1].toLowerCase()) ?? false);
}
// https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/i18n/get-locale-redirect.ts
function getLocaleFromCookie(cookies) {
    const i18n = NextConfig.i18n;
    const nextLocale = cookies.NEXT_LOCALE?.toLowerCase();
    return nextLocale
        ? i18n?.locales.find((locale) => nextLocale === locale.toLowerCase())
        : undefined;
}
export function detectLocale(internalEvent, i18n) {
    if (i18n.localeDetection === false) {
        return i18n.defaultLocale;
    }
    const cookiesLocale = getLocaleFromCookie(internalEvent.cookies);
    const preferredLocale = acceptLanguage(internalEvent.headers["accept-language"], i18n?.locales);
    debug({
        cookiesLocale,
        preferredLocale,
        defaultLocale: i18n.defaultLocale,
    });
    return cookiesLocale ?? preferredLocale ?? i18n.defaultLocale;
    // TODO: handle domain based locale detection
}
export function localizePath(internalEvent) {
    const i18n = NextConfig.i18n;
    if (!i18n) {
        return internalEvent.rawPath;
    }
    if (isLocalizedPath(internalEvent.rawPath)) {
        return internalEvent.rawPath;
    }
    const detectedLocale = detectLocale(internalEvent, i18n);
    return `/${detectedLocale}${internalEvent.rawPath}`;
}
