import { fromReadableStream } from "../../utils/stream";
import { debug } from "../../adapters/logger";
import { extractHostFromHeaders, removeUndefinedFromQuery } from "./utils";
function normalizeAPIGatewayProxyEventHeaders(event) {
    event.multiValueHeaders;
    const headers = {};
    for (const [key, values] of Object.entries(event.multiValueHeaders || {})) {
        if (values) {
            headers[key.toLowerCase()] = values.join(",");
        }
    }
    for (const [key, value] of Object.entries(event.headers || {})) {
        if (value) {
            headers[key.toLowerCase()] = value;
        }
    }
    return headers;
}
function normalizeAPIGatewayProxyEventQueryParams(event) {
    // Note that the same query string values are returned in both
    // "multiValueQueryStringParameters" and "queryStringParameters".
    // We only need to use one of them.
    // For example:
    //   "?name=foo" appears in the event object as
    //   {
    //     ...
    //     queryStringParameters: { name: 'foo' },
    //     multiValueQueryStringParameters: { name: [ 'foo' ] },
    //     ...
    //   }
    const params = new URLSearchParams();
    for (const [key, value] of Object.entries(event.multiValueQueryStringParameters || {})) {
        if (value !== undefined) {
            for (const v of value) {
                params.append(key, v);
            }
        }
    }
    const value = params.toString();
    return value ? `?${value}` : "";
}
async function convertFromAPIGatewayProxyEvent(event) {
    const { path, body, httpMethod, requestContext, isBase64Encoded } = event;
    const headers = normalizeAPIGatewayProxyEventHeaders(event);
    return {
        type: "core",
        method: httpMethod,
        rawPath: path,
        url: `https://${extractHostFromHeaders(headers)}${path}${normalizeAPIGatewayProxyEventQueryParams(event)}`,
        body: Buffer.from(body ?? "", isBase64Encoded ? "base64" : "utf8"),
        headers,
        remoteAddress: requestContext.identity.sourceIp,
        query: removeUndefinedFromQuery(event.multiValueQueryStringParameters ?? {}),
        cookies: event.multiValueHeaders?.cookie?.reduce((acc, cur) => {
            const [key, value] = cur.split("=");
            acc[key] = value;
            return acc;
        }, {}) ?? {},
    };
}
async function convertToApiGatewayProxyResult(result) {
    const headers = {};
    const multiValueHeaders = {};
    Object.entries(result.headers).forEach(([key, value]) => {
        if (Array.isArray(value)) {
            multiValueHeaders[key] = value;
        }
        else {
            if (value === null) {
                headers[key] = "";
                return;
            }
            headers[key] = value;
        }
    });
    const body = await fromReadableStream(result.body, result.isBase64Encoded);
    const response = {
        statusCode: result.statusCode,
        headers,
        body,
        isBase64Encoded: result.isBase64Encoded,
        multiValueHeaders,
    };
    debug(response);
    return response;
}
export default {
    convertFrom: convertFromAPIGatewayProxyEvent,
    convertTo: convertToApiGatewayProxyResult,
    name: "aws-apigw-v1",
};
