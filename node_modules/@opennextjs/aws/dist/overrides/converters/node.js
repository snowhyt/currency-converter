import { parseCookies } from "../../http/util";
import { extractHostFromHeaders } from "./utils";
const converter = {
    convertFrom: async (req) => {
        const body = await new Promise((resolve) => {
            const chunks = [];
            req.on("data", (chunk) => {
                chunks.push(chunk);
            });
            req.on("end", () => {
                resolve(Buffer.concat(chunks));
            });
        });
        const headers = Object.fromEntries(Object.entries(req.headers ?? {})
            .map(([key, value]) => [
            key.toLowerCase(),
            Array.isArray(value) ? value.join(",") : value,
        ])
            .filter(([key]) => key));
        const url = new URL(req.url, `http://${extractHostFromHeaders(headers)}`);
        const query = Object.fromEntries(url.searchParams.entries());
        return {
            type: "core",
            method: req.method ?? "GET",
            rawPath: url.pathname,
            url: url.href,
            body,
            headers,
            remoteAddress: req.headers["x-forwarded-for"] ??
                req.socket.remoteAddress ??
                "::1",
            query,
            cookies: Object.fromEntries(parseCookies(req.headers.cookie)?.map((cookie) => {
                const [key, value] = cookie.split("=");
                return [key, value];
            }) ?? []),
        };
    },
    // Nothing to do here, it's streaming
    convertTo: async (internalResult) => ({
        body: internalResult.body,
        headers: internalResult.headers,
        statusCode: internalResult.statusCode,
    }),
    name: "node",
};
export default converter;
