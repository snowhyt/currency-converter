import { readFile } from "node:fs/promises";
import chalk from "chalk";
import logger from "../logger.js";
import { getCrossPlatformPathRegex } from "../utils/regex.js";
function getOverrideOrDummy(override) {
    if (typeof override === "string") {
        return override;
    }
    // We can return dummy here because if it's not a string, it's a LazyLoadedOverride
    return "dummy";
}
// This could be useful in the future to map overrides to nested folders
const nameToFolder = {
    wrapper: "wrappers",
    converter: "converters",
    tagCache: "tagCache",
    queue: "queue",
    incrementalCache: "incrementalCache",
    imageLoader: "imageLoader",
    originResolver: "originResolver",
    warmer: "warmer",
    proxyExternalRequest: "proxyExternalRequest",
    cdnInvalidation: "cdnInvalidation",
};
const defaultOverrides = {
    wrapper: "aws-lambda",
    converter: "aws-apigw-v2",
    tagCache: "dynamodb",
    queue: "sqs",
    incrementalCache: "s3",
    imageLoader: "s3",
    originResolver: "pattern-env",
    warmer: "aws-lambda",
    proxyExternalRequest: "node",
    cdnInvalidation: "dummy",
};
/**
 * @param opts.overrides - The name of the overrides to use
 * @returns
 */
export function openNextResolvePlugin({ overrides, fnName, }) {
    return {
        name: "opennext-resolve",
        setup(build) {
            logger.debug(chalk.blue("OpenNext Resolve plugin"), fnName ? `for ${fnName}` : "");
            build.onLoad({ filter: getCrossPlatformPathRegex("core/resolve.js") }, async (args) => {
                let contents = await readFile(args.path, "utf-8");
                const overridesEntries = Object.entries(overrides ?? {});
                for (let [overrideName, overrideValue] of overridesEntries) {
                    if (!overrideValue) {
                        continue;
                    }
                    if (overrideName === "wrapper" && overrideValue === "cloudflare") {
                        // "cloudflare" is deprecated and replaced by "cloudflare-edge".
                        overrideValue = "cloudflare-edge";
                    }
                    const folder = nameToFolder[overrideName];
                    const defaultOverride = defaultOverrides[overrideName];
                    contents = contents.replace(`../overrides/${folder}/${defaultOverride}.js`, `../overrides/${folder}/${getOverrideOrDummy(overrideValue)}.js`);
                }
                return {
                    contents,
                };
            });
        },
    };
}
