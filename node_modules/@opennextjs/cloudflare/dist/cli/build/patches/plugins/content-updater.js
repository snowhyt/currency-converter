/**
 * ESBuild stops calling `onLoad` hooks after the first hook returns an updated content.
 *
 * The updater allows multiple plugins to update the content.
 */
import { readFile } from "node:fs/promises";
export class ContentUpdater {
    updaters = new Map();
    /**
     * Register a callback to update the file content.
     *
     * The callbacks are called in order of registration.
     *
     * @param name The name of the plugin (must be unique).
     * @param options Options.
     * @param callback The callback updating the content.
     * @returns A noop ESBuild plugin.
     */
    updateContent(name, options, callback) {
        if (this.updaters.has(name)) {
            throw new Error(`Plugin "${name}" already registered`);
        }
        this.updaters.set(name, { ...options, callback });
        return {
            name,
            setup() { },
        };
    }
    /**
     * Returns an ESBuild plugin applying the registered updates.
     */
    get plugin() {
        return {
            name: "aggregate-on-load",
            setup: async (build) => {
                build.onLoad({ filter: /\.(js|mjs|cjs|jsx|ts|tsx)$/ }, async (args) => {
                    let contents = await readFile(args.path, "utf-8");
                    for (const { filter, namespace, contentFilter, callback } of this.updaters.values()) {
                        if (namespace !== undefined && args.namespace !== namespace) {
                            continue;
                        }
                        if (!args.path.match(filter)) {
                            continue;
                        }
                        if (!contents.match(contentFilter)) {
                            continue;
                        }
                        contents = (await callback({ contents, path: args.path })) ?? contents;
                    }
                    return { contents };
                });
            },
        };
    }
}
