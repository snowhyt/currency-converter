/**
 * ESBuild stops calling `onLoad` hooks after the first hook returns an updated content.
 *
 * The updater allows multiple plugins to update the content.
 */
import { type OnLoadOptions, type Plugin, type PluginBuild } from "esbuild";
/**
 * The callbacks returns either an updated content or undefined if the content is unchanged.
 */
export type Callback = (args: {
    contents: string;
    path: string;
}) => string | undefined | Promise<string | undefined>;
/**
 * The callback is called only when `contentFilter` matches the content.
 * It can be used as a fast heuristic to prevent an expensive update.
 */
export type OnUpdateOptions = OnLoadOptions & {
    contentFilter: RegExp;
};
export type Updater = OnUpdateOptions & {
    callback: Callback;
};
export declare class ContentUpdater {
    updaters: Map<string, Updater>;
    /**
     * Register a callback to update the file content.
     *
     * The callbacks are called in order of registration.
     *
     * @param name The name of the plugin (must be unique).
     * @param options Options.
     * @param callback The callback updating the content.
     * @returns A noop ESBuild plugin.
     */
    updateContent(name: string, options: OnUpdateOptions, callback: Callback): Plugin;
    /**
     * Returns an ESBuild plugin applying the registered updates.
     */
    get plugin(): {
        name: string;
        setup: (build: PluginBuild) => Promise<void>;
    };
}
