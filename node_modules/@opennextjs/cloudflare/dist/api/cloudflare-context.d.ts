declare global {
    interface CloudflareEnv {
        NEXT_CACHE_WORKERS_KV?: KVNamespace;
        NEXT_CACHE_D1?: D1Database;
        NEXT_CACHE_D1_TAGS_TABLE?: string;
        NEXT_CACHE_D1_REVALIDATIONS_TABLE?: string;
        ASSETS?: Fetcher;
    }
}
export type CloudflareContext<CfProperties extends Record<string, unknown> = IncomingRequestCfProperties, Context = ExecutionContext> = {
    /**
     * the worker's [bindings](https://developers.cloudflare.com/workers/runtime-apis/bindings/)
     */
    env: CloudflareEnv;
    /**
     * the request's [cf properties](https://developers.cloudflare.com/workers/runtime-apis/request/#the-cf-property-requestinitcfproperties)
     */
    cf: CfProperties | undefined;
    /**
     * the current [execution context](https://developers.cloudflare.com/workers/runtime-apis/context)
     */
    ctx: Context;
};
/**
 * Utility to get the current Cloudflare context
 *
 * @returns the cloudflare context
 */
export declare function getCloudflareContext<CfProperties extends Record<string, unknown> = IncomingRequestCfProperties, Context = ExecutionContext>(options: {
    async: true;
}): Promise<CloudflareContext<CfProperties, Context>>;
export declare function getCloudflareContext<CfProperties extends Record<string, unknown> = IncomingRequestCfProperties, Context = ExecutionContext>(options?: {
    async: false;
}): CloudflareContext<CfProperties, Context>;
/**
 * Performs some initial setup to integrate as best as possible the local Next.js dev server (run via `next dev`)
 * with the open-next Cloudflare adapter
 *
 * Note: this function should only be called inside the Next.js config file, and although async it doesn't need to be `await`ed
 */
export declare function initOpenNextCloudflareForDev(): Promise<void>;
