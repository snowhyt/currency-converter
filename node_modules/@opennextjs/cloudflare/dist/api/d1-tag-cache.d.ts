import type { OriginalTagCache } from "@opennextjs/aws/types/overrides.js";
/**
 * An instance of the Tag Cache that uses a D1 binding (`NEXT_CACHE_D1`) as it's underlying data store.
 *
 * **Tag/path mappings table**
 *
 * Information about the relation between tags and paths is stored in a `tags` table that contains
 * two columns; `tag`, and `path`. The table name can be configured with `NEXT_CACHE_D1_TAGS_TABLE`
 * environment variable.
 *
 * This table should be populated using an SQL file that is generated during the build process.
 *
 * **Tag revalidations table**
 *
 * Revalidation times for tags are stored in a `revalidations` table that contains two columns; `tags`,
 * and `revalidatedAt`. The table name can be configured with `NEXT_CACHE_D1_REVALIDATIONS_TABLE`
 * environment variable.
 */
declare class D1TagCache implements OriginalTagCache {
    readonly name = "d1-tag-cache";
    getByPath(rawPath: string): Promise<string[]>;
    getByTag(rawTag: string): Promise<string[]>;
    getLastModified(path: string, lastModified?: number): Promise<number>;
    writeTags(tags: {
        tag: string;
        path: string;
        revalidatedAt?: number;
    }[]): Promise<void>;
    private getConfig;
    protected removeBuildId(key: string): string;
    protected getCacheKey(key: string): string;
    protected getBuildId(): string;
}
declare const _default: D1TagCache;
export default _default;
